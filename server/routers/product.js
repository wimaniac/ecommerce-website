const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const Product = require("../models/product");
const Category = require("../models/category");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
const { CloudinaryStorage } = require("multer-storage-cloudinary");

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// C·∫•u h√¨nh multer v·ªõi Cloudinary
const storage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: "products",
    allowedFormats: ["jpg", "png", "jpeg"],
  },
});
const upload = multer({ storage: storage });

// üìå L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
router.get("/", async (req, res) => {
  try {
    const products = await Product.find().populate("category", "name");
    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói server", error: err.message });
  }
});

// üìå L·∫•y s·∫£n ph·∫©m theo ID
router.get("/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const product = await Product.findById(req.params.id).populate("category", "name");

    if (!product) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    res.status(200).json(product);
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói server", error: err.message });
  }
});

// üìå Th√™m s·∫£n ph·∫©m m·ªõi (Upload 1 ·∫£nh ch√≠nh v√† nhi·ªÅu ·∫£nh ph·ª•)
router.post("/", upload.fields([{ name: "image", maxCount: 1 }, { name: "images", maxCount: 5 }]), async (req, res) => {
  try {
    const { name, description, details, brand, price, category, countInStock } = req.body;

    // Ki·ªÉm tra danh m·ª•c h·ª£p l·ªá
    const categories = category ? category.split(",").map(id => id.trim()) : [];
    for (let catId of categories) {
      if (!mongoose.Types.ObjectId.isValid(catId) || !(await Category.findById(catId))) {
        return res.status(400).json({ success: false, message: `Danh m·ª•c kh√¥ng h·ª£p l·ªá: ${catId}` });
      }
    }

    // L∆∞u ·∫£nh ch√≠nh v√† danh s√°ch ·∫£nh ph·ª• l√™n Cloudinary
    const mainImage = req.files["image"] ? req.files["image"][0].path : "";
    const extraImages = req.files["images"] ? req.files["images"].map(file => file.path) : [];

    let product = new Product({
      name,
      description,
      details,
      brand,
      price,
      category: categories,
      countInStock,
      image: mainImage,
      images: extraImages,
    });

    product = await product.save();
    res.status(201).json(product);
  } catch (err) {
    res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m", error: err.message });
  }
});

// üìå C·∫≠p nh·∫≠t s·∫£n ph·∫©m
router.put("/:id", upload.fields([{ name: "image", maxCount: 1 }, { name: "images", maxCount: 5 }]), async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, details, brand, price, category, countInStock } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    let product = await Product.findById(id);
    if (!product) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    // Ki·ªÉm tra danh m·ª•c h·ª£p l·ªá
    const categories = category ? category.split(",").map(id => id.trim()) : [];
    for (let catId of categories) {
      if (!mongoose.Types.ObjectId.isValid(catId) || !(await Category.findById(catId))) {
        return res.status(400).json({ success: false, message: `Danh m·ª•c kh√¥ng h·ª£p l·ªá: ${catId}` });
      }
    }

    // C·∫≠p nh·∫≠t ·∫£nh n·∫øu c√≥
    const mainImage = req.files["image"] ? req.files["image"][0].path : product.image;
    const extraImages = req.files["images"] ? req.files["images"].map(file => file.path) : product.images;

    product.name = name;
    product.description = description;
    product.details = details;
    product.brand = brand;
    product.price = price;
    product.category = categories;
    product.countInStock = countInStock;
    product.image = mainImage;
    product.images = extraImages;

    await product.save();
    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng", data: product });
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m", error: err.message });
  }
});

// üìå X√≥a s·∫£n ph·∫©m
router.delete("/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    res.status(200).json({ success: true, message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói khi x√≥a s·∫£n ph·∫©m", error: err.message });
  }
});

// üìå L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
router.get("/category/:categoryId", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.categoryId)) {
      return res.status(400).json({ success: false, message: "ID danh m·ª•c kh√¥ng h·ª£p l·ªá" });
    }

    const products = await Product.find({ category: req.params.categoryId }).populate("category", "name");
    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói server", error: err.message });
  }
});

module.exports = router;
